hello world

Most individuals carry at least some potentially deleterious variants in their genome. But the effects of these mutations on individuals are not well understood. Sohail et al. examined loss-of-function (LOF) mutations in the genomes of humans and flies. They found that deleterious LOF mutations are further away from each other in the genome than expected by chance, which suggests that genetic interactions are driving selection. Thus, additional mutations do not exhibit an additive effect, and the overall selective parameter is not driven solely by the total number of mutations within the genome. This explains why high levels of variation can be maintained and why sex and recombination are advantageous. 

Negative selection against deleterious alleles produced by mutation influences within-population variation as the most pervasive form of natural selection. However, it is not known whether deleterious alleles affect fitness independently, so that cumulative fitness loss depends exponentially on the number of deleterious alleles, or synergistically, so that each additional deleterious allele results in a larger decrease in relative fitness. Negative selection with synergistic epistasis should produce negative linkage disequilibrium between deleterious alleles and, therefore, an underdispersed distribution of the number of deleterious alleles in the genome. Indeed, we detected underdispersion of the number of rare loss-of-function alleles in eight independent data sets from human and fly populations. Thus, selection against rare protein-disrupting alleles is characterized by synergistic epistasis, which may explain how human and fly populations persist despite high genomic mutation rates.

This assignment builds on the code you created for Assignment 1. If your Assignment 1 code
doesn’t work, please make sure you read your marker’s feedback on it. You can also come to
consultation to get help. You don’t need to get it working perfectly, but you do need to get it
to hide and unhide messages. Even if your Assignment 1 code does hide and unhide messages
properly, you should fix any memory leaks that your marker has identified.
There are three parts to this assignment, and we’re releasing it at the start of Week 6. Task 1 can
be attempted straight away, but Tasks 2 and 3 require some library functions that we won’t cover
in lectures until Weeks 7 and 8. We suggest starting with the functionality in Task 1 unless you
feel like doing some indepent research.
Task 1. Longer messages in multiple files
The program you wrote for Assignment 1 could only handle messages short enough to be hidden
in one image, but what if you need to hide longer messages or use smaller images? One solution
to this problem is to split the hidden message across multiple images.
Add a -m flag to both hide and unhide. This flag should work as follows:
hide -m number-of-files basename output-base-name
unhide -m basename
When given the -m flag, your hide program should look for a file named basename-000.ppm
and hide as much of the message as will fit this image, outputting into output-base-name-000.ppm.
If not all of the message has been hidden, then move on to basename-001.ppm, and so forth.
For example, suppose you want to hide your message, which is stored in a file called secret, in
three pictures of kittens. You would rename your PPMs to kittens-000.ppm, kittens-001.ppm,
and kittens-002.ppm. Then you would type
hide -m 3 kittens meow < secret1
and the hide program would produce as output meow-000.ppm, meow-001.ppm, and meow-002.ppm.
You would send these to your co-conspirators, who would type
unhide -m meow > secret
and the message would be extracted from the three input files.
Notes
It is obviously inconvenient that this system requires all the input images to follow a naming
scheme. If you’d like to do something nicer then there are bonus marks available for implementing
a different system – see below.
Your program should not assume anything about these images other than the filenames, e.g.
you can’t assume that they are all identical, or that they are all the same size. Do not attempt
to hide anything in the headers, or they will no longer work as PPMs and your cover will be
blown.
If the message requires fewer than number-of-files files, you may choose not to produce the
corresponding output files, or you may produce output files that have no message encoded in
them – it’s up to you.
